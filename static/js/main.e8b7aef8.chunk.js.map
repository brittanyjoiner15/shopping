{"version":3,"sources":["serviceWorker.js","ItemBox.js","Balance.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","ItemBox","className","jsonData","Products","map","product","i","key","itemName","price","name","value","onClick","props","src","image","alt","width","React","Component","Balance","state","total","this","App","e","prevState","console","log","parseInt","target","setState","bind","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,8CCXOC,EAAb,uKACY,IAAD,OACP,OACE,yBAAKC,UAAU,WACZC,EAASC,SAASC,KAAI,SAACC,EAASC,GAC/B,OACE,yBAAKL,UAAU,OAAOM,IAAKF,EAAQG,UACjC,4BAAKH,EAAQG,UACb,sCAAYH,EAAQI,OACpB,4BACEC,KAAK,MACLT,UAAU,mBACVU,MAAON,EAAQI,MACfG,QAAS,EAAKC,MAAMD,SAJtB,OAQA,4BAAQX,UAAU,cAAcS,KAAK,QAArC,QAGA,6BACA,yBACET,UAAU,OACVa,IAAKT,EAAQU,MACbC,IAAI,QACJC,MAAM,iBAzBtB,GAA6BC,IAAMC,WCFtBC,EAAb,kDACE,WAAYP,GAAQ,IAAD,8BACjB,cAAMA,IAEDQ,MAAQ,CACXC,MAAO,GAJQ,EADrB,qDAUI,OACE,yBAAKrB,UAAU,YACb,8CAAoBsB,KAAKV,MAAMS,YAZvC,GAA6BJ,IAAMC,WCCtBK,EAAb,kDACE,WAAYX,GAAQ,IAAD,8BACjB,cAAMA,IAWRD,QAAU,SAACa,EAAGC,GACZC,QAAQC,WAAWC,SAASJ,EAAEK,OAAOnB,MAAO,KAC5CgB,QAAQC,WAAWF,GAEnB,EAAKK,SAAS,CAAET,MAAO,EAAKD,MAAMC,MAAQO,SAASJ,EAAEK,OAAOnB,MAAO,MACnEgB,QAAQC,IAAI,EAAKP,MAAMC,QAdvB,EAAKD,MAAQ,CACXC,MAAO,GAGT,EAAKV,QAAU,EAAKA,QAAQoB,KAAb,gBAPE,EADrB,qDAsBI,OACE,oCACE,6CACA,kBAAC,EAAD,CAASV,MAAOC,KAAKF,MAAMC,QAC3B,kBAAC,EAAD,CAASV,QAASW,KAAKX,eA1B/B,GAAyBO,aCAzBc,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SJyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlB,QAAQkB,MAAMA,EAAMC,a","file":"static/js/main.e8b7aef8.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport jsonData from \"./shoppingList.json\";\nimport { PropTypes } from \"react\";\n\nexport class ItemBox extends React.Component {\n  render() {\n    return (\n      <div className=\"itemBox\">\n        {jsonData.Products.map((product, i) => {\n          return (\n            <div className=\"item\" key={product.itemName}>\n              <h2>{product.itemName}</h2>\n              <p>Price: ${product.price}</p>\n              <button\n                name=\"buy\"\n                className=\"btn-primary mx-2\"\n                value={product.price}\n                onClick={this.props.onClick}\n              >\n                Buy\n              </button>\n              <button className=\"btn-warning\" name=\"sell\">\n                Sell\n              </button>\n              <br />\n              <img\n                className=\"my-3\"\n                src={product.image}\n                alt=\"photo\"\n                width=\"75%\"\n              />\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nexport class Balance extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      total: 0,\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"totalBox\">\n        <h4>Total Spend : ${this.props.total}</h4>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { ItemBox } from \"./ItemBox\";\nimport { Balance } from \"./Balance\";\n\nexport class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      total: 0,\n    };\n\n    this.onClick = this.onClick.bind(this);\n\n    //do we need to add this\n  }\n\n  onClick = (e, prevState) => {\n    console.log(typeof parseInt(e.target.value, 10));\n    console.log(typeof prevState);\n    //prev state is undefined, so there's something wrong with pulling that.\n    this.setState({ total: this.state.total + parseInt(e.target.value, 10) });\n    console.log(this.state.total);\n  };\n\n  render() {\n    return (\n      <>\n        <h1>Shopping Game</h1>\n        <Balance total={this.state.total}></Balance>\n        <ItemBox onClick={this.onClick}></ItemBox>\n      </>\n    );\n  }\n}\n\n// <> means fragment, just a way of grouping things, so if you dont need a div element, the more elements you render, slower your page is\n// have a parent that brings all components in\n// redux can store everything in one place\n// context\n\n//try putting state back in constructor\n","import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { App } from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n// component should be named same as file\n//\n"],"sourceRoot":""}